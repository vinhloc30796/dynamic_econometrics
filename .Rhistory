R.version
install.packages(c("vars", "xtable"))
# Loc: setting working directory - uncomment as needed
setwd("C:/Users/vinhl/OneDrive/[Work] Translate and Class/[RUG] Dynamic Econometrics/dynamic_econometrics")
library('readxl') # To read Excel files
library('urca') # For the Dickey Fuller test
library('fpp2') # For forecasting
library('tseries') # To estimate ARMA models
library('dynlm') # To estimate ARDL models
library('GetoptLong') # For pretty printing
library('ggplot2') # For plotting
library('ggfortify')
library('vars')
#library(S4Vectors)
library(reshape2) #ranking
library(xtable) #latex output
# Set seed to ensure reproducibility
set.seed(1)
# Kris: setting working directory - uncomment as needed
setwd("C:/Users/Kris Rama/Desktop/Econometrics/Dynamic Econometrics/Research Paper//")
# Loc: setting working directory - uncomment as needed
# setwd("C:/Users/vinhl/OneDrive/[Work] Translate and Class/[RUG] Dynamic Econometrics/dynamic_econometrics")
data <- read_excel("FREDMD_march2019.xlsx") #import excel
#save columns as time series
indpro <- ts(data[,'INDPRO'], start = c(1959), end = c(2006,12), frequency = 12)
t10yffm <- ts(data[,'T10YFFM'], start = c(1959), end = c(2006,12), frequency = 12)
numlags <- floor(12*((length(indpro)/100)^0.25)) #max lag length
plot.ts(cbind(indpro,t10yffm), ylab=c("INDPRO", "T10YFFM"))
autoplot(indpro)
#d. transformation
d.indpro <- diff(indpro)
autoplot(d.indpro)
layout(1:2); acf(d.indpro); pacf(d.indpro)#acf and pacf of d.indpro
#d.log transformation
d.ln.indpro <- 100*diff(log(indpro))
autoplot(d.ln.indpro)
layout(1:2); acf(d.ln.indpro); pacf(d.ln.indpro) #acf and pacf of d.ln.indpro
#stationarity, Augmented Dickey Fuller test
adf_d.ln.indpro <- ur.df(d.ln.indpro, lags = numlags, selectlags = "Fixed")
summary(adf_d.ln.indpro)@teststat #test stat
summary(adf_d.ln.indpro)@cval #critical values
#modeling d.ln.indpro
aic_d.ln.indpro <- matrix(NA,5,5)
colnames(aic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_d.ln.indpro <- matrix(NA,5,5)
colnames(bic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
t_est <- matrix(NA,9,9)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(d.ln.indpro, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_d.ln.indpro[i+1,j+1] <- fit$aic
bic_d.ln.indpro[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_d.ln.indpro
bic_d.ln.indpro
#ranking aic
data.frame(rows=rownames(aic_d.ln.indpro), cols=colnames(aic_d.ln.indpro), stack(as.data.frame(aic_d.ln.indpro)))
aic_d.ln.indpro <- data.frame(as.table(aic_d.ln.indpro))
aic_d.ln.indpro <- aic_d.ln.indpro[order(aic_d.ln.indpro$Freq),]
aic_d.ln.indpro
#ranking bic
data.frame(rows=rownames(bic_d.ln.indpro), cols=colnames(bic_d.ln.indpro), stack(as.data.frame(bic_d.ln.indpro)))
bic_d.ln.indpro <- data.frame(as.table(bic_d.ln.indpro))
bic_d.ln.indpro <- bic_d.ln.indpro[order(bic_d.ln.indpro$Freq),]
#ranking bic
data.frame(rows=rownames(bic_d.ln.indpro), cols=colnames(bic_d.ln.indpro), stack(as.data.frame(bic_d.ln.indpro)))
#latex tables
aic_d.ln.indpro$x <- paste(aic_d.ln.indpro$Var1, aic_d.ln.indpro$Var2)
aic_d.ln.indpro <- xtable(aic_d.ln.indpro[1:9, c(4,3)],  caption = 'AIC scores for d.ln.indpro', digits = 1)
print(aic_d.ln.indpro, file="aic_d.ln.indpro.txt", include.rownames = FALSE, include.colnames = FALSE, hline.after = c(0), add.to.row = list(pos = list(-1,0), command = c("\\multicolumn{2}{c}{AIC} \\\\\n","")))
bic_d.ln.indpro$x <- paste(bic_d.ln.indpro$Var1, bic_d.ln.indpro$Var2)
bic_d.ln.indpro <- xtable(bic_d.ln.indpro[1:9, c(4,3)],  caption = 'BIC scores for d.ln.indpro', digits = 1)
print(bic_d.ln.indpro, file="bic_d.ln.indpro.txt", include.rownames = FALSE, include.colnames = FALSE, hline.after = c(0), add.to.row = list(pos = list(-1,0), command = c("\\multicolumn{2}{c}{BIC} \\\\\n","")))
#residuals
d.ln.indpro.arma1 <- Arima(d.ln.indpro, order = c(1,0,0))
checkresiduals(d.ln.indpro.arma1)
d.ln.indpro.arma2 <- Arima(d.ln.indpro, order = c(2,0,0))
checkresiduals(d.ln.indpro.arma2)
d.ln.indpro.arma3 <- Arima(d.ln.indpro, order = c(3,0,0))
checkresiduals(d.ln.indpro.arma3)
#AR(3) coefficients
d.ln.indpro.arma3
#predictions
train_test_split <- floor(length(d.ln.indpro) *0.66)
train <- d.ln.indpro[0:train_test_split]
test <- d.ln.indpro[train_test_split:length(d.ln.indpro)]
model <- Arima(train, order=c(3, 0, 0))
predictions <- predict(model, 1)$pred
history <- append(train, test[1])
for (t in c(2:length(test))) {
model <- Arima(history, order=c(3, 0, 0))
predictions <- append(predictions, predict(model, 1)$pred)
history <- append(history, test[t])
}
length(predictions)
length(test)
mean((predictions - test)^2)
layout(1:2); ts.plot(predictions); ts.plot(test)
autoplot(t10yffm)
#stationarity, Augmented Dickey Fuller test
adf_t10yffm <- ur.df(t10yffm, lags = numlags, selectlags = "Fixed")
summary(adf_t10yffm)@teststat #test stat
summary(adf_t10yffm)@cval #critical values
layout(1:2); acf(t10yffm); pacf(t10yffm)#acf and pacf of t10yffm
#modeling t10yffm
aic_t10yffm <- matrix(NA,5,5)
colnames(aic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_t10yffm <- matrix(NA,5,5)
colnames(bic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
t_est <- matrix(NA,9,9)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(t10yffm, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_t10yffm[i+1,j+1] <- fit$aic
bic_t10yffm[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_t10yffm
bic_t10yffm
#ranking aic
data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))
#latex tables
aic_t10yffm$x <- paste(aic_t10yffm$Var1, aic_t10yffm$Var2)
#ranking aic
data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))
aic_t10yffm <- data.frame(as.table(aic_t10yffm))
aic_t10yffm <- aic_t10yffm[order(aic_t10yffm$Freq),]
#latex tables
aic_t10yffm$x <- paste(aic_t10yffm$Var1, aic_t10yffm$Var2)
aic_t10yffm$x
for (i in 0:4){
for (j in 0:4){
fit <- Arima(d.ln.indpro, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_d.ln.indpro[i+1,j+1] <- fit$aic
bic_d.ln.indpro[i+1,j+1] <- fit$bic
}
}
#scores
aic_d.ln.indpro
bic_d.ln.indpro
#modeling d.ln.indpro
aic_d.ln.indpro <- matrix(NA,5,5)
colnames(aic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_d.ln.indpro <- matrix(NA,5,5)
colnames(bic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
for (i in 0:4){
for (j in 0:4){
fit <- Arima(d.ln.indpro, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_d.ln.indpro[i+1,j+1] <- fit$aic
bic_d.ln.indpro[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_d.ln.indpro
#check for sample size
t_est <- matrix(NA,5,5)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(d.ln.indpro, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_d.ln.indpro[i+1,j+1] <- fit$aic
bic_d.ln.indpro[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_d.ln.indpro
bic_d.ln.indpro
aic_d.ln.indpro.ranked <- data.frame(as.table(aic_d.ln.indpro))
aic_d.ln.indpro.ranked
aic_d.ln.indpro.ranked <- aic_d.ln.indpro[order(aic_d.ln.indpro$Freq),]
#ranking aic
data.frame(rows=rownames(aic_d.ln.indpro), cols=colnames(aic_d.ln.indpro), stack(as.data.frame(aic_d.ln.indpro)[, c("rows", "cols", "values")))
#ranking aic
data.frame(rows=rownames(aic_d.ln.indpro), cols=colnames(aic_d.ln.indpro), stack(as.data.frame(aic_d.ln.indpro)))[, c("rows", "cols", "values")]
aic_t10yffm.stacked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("rows", "cols", "values")]
#modeling t10yffm
aic_t10yffm <- matrix(NA,5,5)
colnames(aic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_t10yffm <- matrix(NA,5,5)
colnames(bic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
#check for sample size
t_est <- matrix(NA,5,5)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(t10yffm, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_t10yffm[i+1,j+1] <- fit$aic
bic_t10yffm[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_t10yffm
bic_t10yffm
#working
aic_t10yffm.stacked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("rows", "cols", "values")]
aic_t10yffm.stacked
aic_t10yffm.stacked[order(aic_t10yffm.stacked),][complete.cases(aic_t10yffm.stacked),]
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("AR", "MA", "AIC")]
#modeling t10yffm
aic_t10yffm <- matrix(NA,5,5)
colnames(aic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_t10yffm <- matrix(NA,5,5)
colnames(bic_t10yffm) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_t10yffm) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
#check for sample size
t_est <- matrix(NA,5,5)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(t10yffm, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_t10yffm[i+1,j+1] <- fit$aic
bic_t10yffm[i+1,j+1] <- fit$bic
}
}
t_est
#scores
aic_t10yffm
bic_t10yffm
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("AR", "MA", "AIC")]
bic_t10yffm.ranked <- data.frame(rows=rownames(bic_t10yffm), cols=colnames(bic_t10yffm), stack(as.data.frame(bic_t10yffm)))[, c("rows", "cols", "values")]
bic_t10yffm.ranked <- na.omit(aic_t10yffm.stacked[order(aic_t10yffm.stacked),][complete.cases(aic_t10yffm.stacked),])
bic_t10yffm.ranked
aic_t10yffm.print <- xtable(aic_t10yffm[1:9, c(4,3)],  caption = 'AIC scores for different ARMA models when fitting on T10YFFM', digits = 1)
aic_t10yffm.print <- xtable(aic_t10yffm.ranked[1:9, c(4,3)],  caption = 'AIC scores for different ARMA models when fitting on T10YFFM', digits = 1)
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("AR", "MA", "AIC")]
colnames(aic_t10yffm.ranked) = c('AR', 'MA', 'AIC')
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("rows", "cols", "values")]
colnames(aic_t10yffm.ranked) = c('AR', 'MA', 'AIC')
aic_t10yffm.ranked <- na.omit(aic_t10yffm.stacked[order(aic_t10yffm.stacked),][complete.cases(aic_t10yffm.stacked),])
aic_t10yffm.ranked
colnames(aic_t10yffm.ranked) <-  c('AR', 'MA', 'AIC')
aic_t10yffm.ranked <- na.omit(aic_t10yffm.stacked[order(aic_t10yffm.stacked),][complete.cases(aic_t10yffm.stacked),])
aic_t10yffm.ranked
?colnames
colnames(aic_t10yffm.ranked) <-  c("AR", "MA", "AIC")
aic_t10yffm.ranked <- na.omit(aic_t10yffm.stacked[order(aic_t10yffm.stacked),][complete.cases(aic_t10yffm.stacked),])
aic_t10yffm.ranked
colnames(aic_t10yffm.ranked)
colnames(aic_t10yffm.ranked) <- c("AR", "MA", "AIC")
colnames(aic_t10yffm.ranked)
aic_t10yffm.ranked
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("rows", "cols", "values")]
colnames(aic_t10yffm.ranked) <-  c("AR", "MA", "AIC")
aic_t10yffm.ranked <- na.omit(aic_t10yffm.stacked[order(aic_t10yffm.ranked),][complete.cases(aic_t10yffm.ranked),])
aic_t10yffm.ranked
#working
aic_t10yffm.ranked <- data.frame(rows=rownames(aic_t10yffm), cols=colnames(aic_t10yffm), stack(as.data.frame(aic_t10yffm)))[, c("rows", "cols", "values")]
colnames(aic_t10yffm.ranked) <-  c("AR", "MA", "AIC")
aic_t10yffm.ranked <- na.omit(aic_t10yffm.ranked[order(aic_t10yffm.ranked),][complete.cases(aic_t10yffm.ranked),])
aic_t10yffm.ranked
aic_t10yffm.print <- xtable(aic_t10yffm.ranked[1:9, c(4,3)],  caption = 'AIC scores for different ARMA models when fitting on T10YFFM', digits = 1)
aic_t10yffm.ranked[1:9, c(4,3)]
aic_t10yffm.ranked[(1:9), c(4,3)]
aic_t10yffm.ranked[(1:9); c(4,3)]
aic_t10yffm.ranked[(1:9), (4,3)]
aic_t10yffm.ranked[c(1:9), c(4,3)]
aic_t10yffm.ranked[c(1:9), c(4:3)]
#latex tables
aic_d.ln.indpro$x <- paste(aic_d.ln.indpro$Var1, aic_d.ln.indpro$Var2)
#modeling d.ln.indpro
aic_d.ln.indpro <- matrix(NA,5,5)
colnames(aic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(aic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
bic_d.ln.indpro <- matrix(NA,5,5)
colnames(bic_d.ln.indpro) <- c("MA(0)", "MA(1)", "MA(2)", "MA(3)", "MA(4)")
rownames(bic_d.ln.indpro) <- c("AR(0)", "AR(1)", "AR(2)", "AR(3)", "AR(4)")
#check for sample size
t_est <- matrix(NA,5,5)
for (i in 0:4){
for (j in 0:4){
fit <- Arima(d.ln.indpro, order = c(i,0,j))
t_est[i+1,j+1] <- length(fit$residuals)
aic_d.ln.indpro[i+1,j+1] <- fit$aic
bic_d.ln.indpro[i+1,j+1] <- fit$bic
}
}
t_est
#latex tables
aic_d.ln.indpro$x <- paste(aic_d.ln.indpro$Var1, aic_d.ln.indpro$Var2)
aic_d.ln.indpro <- xtable(aic_d.ln.indpro[1:9, c(4,3)],  caption = 'AIC scores for d.ln.indpro', digits = 1)
print(xtable(aic_t10yffm.ranked))
aic_d.ln.indpro.ranked[1:9]
aic_d.ln.indpro.ranked[(1:9)]
aic_d.ln.indpro.ranked[(1:9),:]
aic_d.ln.indpro.ranked[1:9,:]
aic_d.ln.indpro.ranked[c(1:9),:]
aic_d.ln.indpro.ranked
aic_d.ln.indpro.ranked[9]
aic_d.ln.indpro.ranked[,]
aic_d.ln.indpro.ranked[1,]
aic_d.ln.indpro.ranked[1:9,]
